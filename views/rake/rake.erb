<section id="rake" class="slide">
  <h2>Rake</h2>
  <p>
    It is similar to <strong>Make</strong>, but it has a number of differences. The tool is written in the Ruby, and the <strong>Rakefiles</strong> (equivalent of Makefiles in Make) use Ruby syntax. You don't have to learn new complicated build tool syntax.
  </p>
  <div id="install-rake" class="slide">
    <h3>Installation</h3>
    <script type="syntaxhighlighter" class="brush: bash">
      <![CDATA[
      gem install rake]]>
    </script>
  </div>
  <div id="first-rake-task" class="slide">
    <h3>First Rake Task</h3>
    <p>
      Rake tasks should always be located in file named <strong>rakefile</strong>, <strong>Rakefile</strong>, <strong>rakefile.rb</strong> or <strong>Rakefile.rb</strong>. First two forms are most commonly used.
    </p>
    <script type="syntaxhighlighter" class="brush: ruby">
      <![CDATA[
      # file Rakefile
      task :default do
        puts "Hello World!"
      end]]>
    </script>
    <script type="syntaxhighlighter" class="brush: bash">
      <![CDATA[
      rake
      Hello World!]]>
    </script>
    <p>
      What actually happened? When given Rakefile, Rake is looking for tasks which are simply task method invocations. There may be many tasks located in one Rakefile. When running Rake from the command line, you can pass name of the task that you want to be executed. If there is no task given, Rake is looking for the default task. That is why our Rake invocation did the job without passing any extra parameters.
    </p>
  </div>
</section>