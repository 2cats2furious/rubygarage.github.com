<section id="scopes" class="slide">
  <h2>Scopes</h2>

  <script type="syntaxhighlighter" class="brush: ruby">
    class Post < ApplicationRecord
      ...
      scope :published, -> { where(published: true) }
    end
  </script>

  <script type="syntaxhighlighter" class="brush: ruby">
    class Post < ApplicationRecord
      ...
      def self.published
        where(published: true)
      end
    end
  </script>

   <script type="syntaxhighlighter" class="brush: ruby">
    class Post < ApplicationRecord
      scope :published,               -> { where(published: true) }
      scope :published_with_tags, -> { published.where("tags_count > 0") }
    end
  </script>

  <script type="syntaxhighlighter" class="brush: ruby">
      Post.published
  </script>

  <script type="syntaxhighlighter" class="brush: ruby">
      Tags.first.posts.published
  </script>

  Passing in arguments
  <script type="syntaxhighlighter" class="brush: ruby">
    class Post < ApplicationRecord
      ...
      scope :created_before, ->(time) { where("created_at < ?", time) }
    end
  </script>

  <script type="syntaxhighlighter" class="brush: ruby">
     Post.created_before(Time.now)
  </script>

  Merging of scopes

  <script type="syntaxhighlighter" class="brush: bash">
    bin/rails g migration AddStateToUser state:string
  </script>

   <script type="syntaxhighlighter" class="brush: ruby">
    class User < ApplicationRecord
      scope :active, -> { where state: 'active' }
      scope :inactive, -> { where state: 'inactive' }
    end
  </script>

 <script type="syntaxhighlighter" class="brush: bash">
    > User.active.inactive
      User Load (0.2ms)  SELECT "users".* FROM "users" WHERE "users"."state" = 'active' AND "users"."state" = 'inactive'
  </script>

  <script type="syntaxhighlighter" class="brush: bash">
    > User.active.where(state: 'finished')
      User Load (0.5ms)  SELECT "users".* FROM "users" WHERE "users"."state" = 'active' AND "users"."state" = 'finished'
  </script>

If we do want the last where clause to win
<script type="syntaxhighlighter" class="brush: bash">
    > User.active.merge(User.inactive)
      User Load (0.6ms)  SELECT "users".* FROM "users" WHERE "users"."state" = 'inactive'
  </script>

default_scope
- will be applied across all queries
- will be overridden by scope and where conditions
<script type="syntaxhighlighter" class="brush: ruby">
  class User < ApplicationRecord
    default_scope { where state: 'pending' }
    scope :active, -> { where state: 'active' }
    scope :inactive, -> { where state: 'inactive' }
  end
</script>

<script type="syntaxhighlighter" class="brush: bash">
  > User.all
    User Load (0.2ms)  SELECT "users".* FROM "users" WHERE "users"."state" = 'pending'
</script>

<script type="syntaxhighlighter" class="brush: bash">
  > User.active
    User Load (0.6ms)  SELECT "users".* FROM "users" WHERE "users"."state" = 'active'
</script>

<script type="syntaxhighlighter" class="brush: bash">
  > User.where(state: 'inactive')
    User Load (0.6ms)  SELECT "users".* FROM "users" WHERE "users"."state" = 'inactive'
</script>

Removing All Scoping

<script type="syntaxhighlighter" class="brush: bash">
  > User.unscoped.all
    SELECT "users".* FROM "users"
</script>
</section>
