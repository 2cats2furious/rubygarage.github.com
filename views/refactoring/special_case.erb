<section id="special-case" class="slide">
  <h2>Special Case</h2>
  <ul>
    <li>Complex if statements</li>
    <li>Guard clauses checks for particular values before doing work (especially comparisons to constants)</li>
  </ul>
  <h3>Problems</h3>
  <ul>
    <li>Communication: A Special Case increases the amount the reader has to hold in his head while attempting to understand a code fragment.</li>
  </ul>
  <h3>What to Do</h3>
  <ul>
    <li>If the conditionals are taking the place of polymorphism, <a href="#replace-type-code-with-polymorphism-before">Replace Conditional with Polymorphism</a> or <a href="#replace-type-code-with-module-extension-before">Replace Type Code with Module Extension</a> or <a href="#replace-type-code-with-state-strategy-before">Replace Type Code with State Strategy</a>. You may find things become more clear if you first use Extract Method on the clauses.</li>
    <li>If used once <a href="#replace-parameter-with-method-before">Replace Parameter with Method</a></li>
    <li>If one branch is null <a href="#introduce-null-object-before">Introduce Null Object</a></li>
    <li>If have dificult conditions use <a href="#decompose-conditional-before">Decompose conditional</a>, <a href="#substitute-algorithm-before">Substitute Algorithm</a>, <a href="#replace-method-with-method-object-before">Replace Method With Method Object</a></li>
    <li>If the if and else clauses are similar enough, you may be able to rewrite them so that the same code fragment can generate the proper results for each case; then the conditional can be eliminated.</li>
  </ul>
</section>