<section id="method-lookup" class="slide">
  <h2>Method lookup</h2>
  <ul>
    <li>Ð¡hecks the eigenclass of 'foo' for singleton methods named 'bar'.</li>
    <li>If no method 'bar' is found in the eigenclass, Ruby searches the class of 'foo' for an instance method named 'bar'.</li>
    <li>If no method 'bar' is found in the class, Ruby searches the instance methods of any modules included by the class of 'foo'. If that class includes more than one module, then they are searched in the reverse of the order in which they were included. That is, the most recently included module is searched first. </li>
    <li>If no instance method 'bar' is found in the class of 'foo' or in its modules, then the search moves up the inheritance hierarchy to the superclass. Steps 2 and 3 are repeated for each class in the inheritance hierarchy until each ancestor class and its included modules have been searched.</li>
    <li>If no method named 'bar' is found after completing the search, then a method named method_missing is invoked instead.</li>
  </ul>
  <script type="syntaxhighlighter" class="brush: ruby">
    foo = "some string"
    foo.bar # singleton: no -> String class: no -> Comparable module: no ->  
            # Object class: no -> Kernel module: no -> method_missing: no -> raise an exception
  </script>
</section>
