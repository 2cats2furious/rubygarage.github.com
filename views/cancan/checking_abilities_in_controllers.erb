<section id="checking-abilities-in-controllers" class="slide">
  <h2>Checking Abilities in Controllers</h2>
  <p>You can use the authorize! method to manually handle authorization in a controller action. This will raise a CanCan::AccessDenied exception when the user does not have permission.</p>
  <p>Sometimes you need to restrict which records are returned from the database based on what the user is able to access. This can be done with the accessible_by method on any Active Record model. Simply pass it the current ability to find only the records which the user is able to :read.</p>
  app/controllers/posts_controller.rb
  <script type="syntaxhighlighter" class="brush: ruby">
  class PostsController < ApplicationController
    before_action :set_post, only: [:show, :edit, :update, :destroy]
   
    # GET /posts
    # GET /posts.json
    def index
      @posts = Post.accessible_by(current_ability)
    end
   
    # GET /posts/1
    # GET /posts/1.json
    def show
      authorize! :show, @post
    end
   
    # GET /posts/new
    def new
      @post = Post.new(user_id: current_user.id)
      authorize! :create, @post
    end
   
    # GET /posts/1/edit
    def edit
      authorize! :update, @post
    end
   
    # POST /posts
    # POST /posts.json
    def create
      @post = Post.new(post_params)
      @post.user_id = current_user.id

      authorize! :create, @post
   
      respond_to do |format|
        if @post.save
          format.html { redirect_to @post, notice: 'Post was successfully created.' }
          format.json { render action: 'show', status: :created, location: @post }
        else
          format.html { render action: 'new' }
          format.json { render json: @post.errors, status: :unprocessable_entity }
        end
      end
    end
   
    # PATCH/PUT /posts/1
    # PATCH/PUT /posts/1.json
    def update
      authorize! :update, @post
      respond_to do |format|
        if @post.update(post_params)
          format.html { redirect_to @post, notice: 'Post was successfully updated.' }
          format.json { head :no_content }
        else
          format.html { render action: 'edit' }
          format.json { render json: @post.errors, status: :unprocessable_entity }
        end
      end
    end
   
    # DELETE /posts/1
    # DELETE /posts/1.json
    def destroy
      authorize! :destroy, @post
      @post.destroy
      respond_to do |format|
        format.html { redirect_to posts_url }
        format.json { head :no_content }
      end
    end
   
    private
      # Use callbacks to share common setup or constraints between actions.
      def set_post
        @post = Post.find(params[:id])
      end
   
      # Never trust parameters from the scary internet, only allow the white list through.
      def post_params
        params.require(:post).permit(:title, :text)
      end
  end
  </script>
</section>