<section id="extract-form-object" class="slide">
  <h2>Extract a form object</h2>
  <h3>Example</h3>
  app/controllers/users_controller.rb
  <script type="syntaxhighlighter" class="brush: ruby">
    class UsersController < ApplicationController 
      def new
        @user = User.new 
      end
    
      def create
        @user = User.new(signup_params)
        respond_to do |format| 
          if @user.save
            format.html { redirect_to @user, notice: 'Signup successfull.' } 
          else
            format.html { render new_signup_path } 
          end
        end
      end
    
      private
      
      def signup_params
        params.require(:user).permit(:name, :email, :password)
      end
    end
  </script>
  app/models/user.rb
  <script type="syntaxhighlighter" class="brush: ruby">
    class User < ActiveRecord::Base 
      attr_accessor :password
      
      validates :name, presence: true
      validates :email, presence: true
      validates :password, presence: { on: :create}, length: { within: 8..255, allow_blank: true }
    end
  </script>
  <h3>Refactoring</h3>
  app/controllers/users_controller.rb
  <script type="syntaxhighlighter" class="brush: ruby">
    class UsersController < ApplicationController
      def new
        @signup = Signup.new
      end

      def create
        @signup = Signup.new(signup_params)
        respond_to do |format|
          if @signup.save
            format.html { redirect_to @signup.user, notice: 'Signup successfull.' }
          else
            format.html { render new_signup_path } 
          end
        end
      end

      private
      
      def signup_params
        params.require(:user).permit(:name, :email, :password)
      end
    end
  </script>
  app/models/user.rb
  <script type="syntaxhighlighter" class="brush: ruby">
    class User < ActiveRecord::Base 
      attr_accessor :password
    end
  </script>
  app/forms/Signup.rb
  <script type="syntaxhighlighter" class="brush: ruby">
    class Signup
      include ActiveModel::Model
      include Virtus.model

      attr_reader :user

      attribute :name, String
      attribute :email, String
      attribute :password, String
      
      validates :name, presence: true
      validates :email, presence: true
      validates :password, length: { within: 8..255 }
      
      def persisted? 
        false
      end

      def save
        if valid?
          persist!
          true
        else
          false
        end
      end

      private

      def persist!
        @user = User.new(name: name, email: email, password: password).save!(validate: false)
      end
    end
  </script>
</section>