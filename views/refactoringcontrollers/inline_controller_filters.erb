<section id="inline-controller-filters" class="slide">
  <h2>Inline controller filters</h2>
  <p>Using controller filters is a very popular approach in Rails apps. This technique is used for implementing cross-cutting concerns, like authorization, auditing and data loading.</p>
  <p>Often, the filters introduce coupling between the controller action and the result of the filters. Sometimes the coupling doesn’t hurt much. Sometimes, though, the filters prepare some global state using the instance variables. That makes the coupling worse, as it’s difficult to extract a service object from a controller.</p>
  <h3>Example</h3>
  <script type="syntaxhighlighter" class="brush: ruby">
    class TimelogController < ApplicationController
      before_filter :find_project_for_new_time_entry, :only => [:create]
      

      def create
        @time_entry ||= TimeEntry.new(:project => @project, :issue => @issue, :user => User.current, :spent_on => User.current.today)
        @time_entry.safe_attributes = params[:time_entry]
        call_hook(:controller_timelog_edit_before_save, { :params => params, :time_entry => @time_entry })
        if @time_entry.save respond_to do |format|
          format.html do
            # ...
          end
        end
      end

      private

      def find_project_for_new_time_entry 
        find_optional_project_for_new_time_entry 
        if @project.nil?
          render_404
        end
      end
    
      def find_optional_project_for_new_time_entry
        # ...
      end
    end
  </script>
  <h3>Refactoring</h3>
  <script type="syntaxhighlighter" class="brush: ruby">
    class TimelogController < ApplicationController
      def create
        find_project_for_new_time_entry
        @time_entry ||= TimeEntry.new(:project => @project, :issue => @issue, :user => User.current, :spent_on => User.current.today)
        @time_entry.safe_attributes = params[:time_entry]
        call_hook(:controller_timelog_edit_before_save, { :params => params, :time_entry => @time_entry })
        if @time_entry.save respond_to do |format|
          format.html do
            # ...
          end
        end
      end

      private

      def find_project_for_new_time_entry 
        find_optional_project_for_new_time_entry 
        if @project.nil?
          render_404
        end
      end
    
      def find_optional_project_for_new_time_entry
        # ...
      end
    end
  </script>
</section>