<section id="let" class="slide">
  <h2>Let</h2>
  <p>
    Use <i>let</i> to define a memoized helper method. The value will be cached across multiple calls in the same example but not across examples.
  </p>
  <h3>Use before</h3>
  <script type="syntaxhighlighter" class="brush: ruby">
  <![CDATA[
  before do
    @empty_array = Array.new
  end

  it "should be empty" do
    @empty_array.should be_empty
  end]]>
  </script>
  <h3>Use let</h3>
  <script type="syntaxhighlighter" class="brush: ruby">
  <![CDATA[
  let(:empty_array) { Array.new }

  it "should be empty" do
    empty_array.should be_empty
  end]]>
  </script>
  <p>
    Note that <i>let</i> is lazy-evaluated: it is not evaluated until the first time the method it defines is invoked. You can use <i>let!</i> to force the method's invocation before each example.
  </p>
</section>