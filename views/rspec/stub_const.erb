<section id="stub-const" class="slide">
  <h2>Stubbing constants</h2>

  <p> When the constant is already defined, the stubbed value
will replace the original value for the duration of the example.</p>

  <h3>Stub top-level constant</h3>

  <script type="syntaxhighlighter" class="brush: ruby">
    TOP_LEVEL_CONST = 100

    RSpec.describe "stubbing TOP_LEVEL_CONST" do
      it "can stub TOP_LEVEL_CONST with a different value" do
        stub_const("TOP_LEVEL_CONST", 20)
        expect(TOP_LEVEL_CONST).to eq(20)
      end

      it "restores the stubbed constant when the example completes" do
        expect(TOP_LEVEL_CONST).to eq(100)
      end
    end
  </script>

  <h3>Stub nested constant</h3>

  <script type="syntaxhighlighter" class="brush: ruby">
    module Calculation
      class Statistic
        LEVEL = 15
      end
    end

    module Calculation
      RSpec.describe Statistic do
        it "stubs the nested constant when it is fully qualified" do
          stub_const("Calculation::Statistic::LEVEL", 52)
          expect(Statistic::LEVEL).to eq(52)
        end
      end
    end
  </script>

  <h3>Transfer nested constants</h3>

  <script type="syntaxhighlighter" class="brush: ruby">
    module Calculation
      class Statistic
        LEVEL = 15
      end
    end

    module Calculation
      RSpec.describe Statistic do
        let(:new_class) { Class.new }

        it "does not transfer nested constants by default" do
          stub_const("Calculation::Statistic", new_class)
          expect { Statistic::LEVEL }.to raise_error(NameError)
        end

        it "transfers nested constants when using transfer_nested_constants: true" do
          stub_const("Calculation::Statistic", new_class, transfer_nested_constants: true)
          expect(Statistic::LEVEL).to eq(15)
        end

        it "can specify a list of nested constants to transfer" do
          stub_const("Calculation::Statistic", new_class, transfer_nested_constants:  [:LEVEL])
          expect(Statistic::LEVEL).to eq(15)
        end
      end
  </script>
</section>
