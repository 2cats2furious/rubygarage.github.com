<section id="unstub" class="slide">
  <h2>Removing stubs</h2>
  Removes a stub. On a double, the object will no longer respond to message. On a real object, the original method (if it exists) is restored.
  <h3>New syntax</h3>
  <h4>and_call_original</h4>
  When working with a partial double object, you may occasionally want to set a message expecation without interfering with how the object responds to the message.
  <script type="syntaxhighlighter" class="brush: ruby">
    RSpec.describe "call original" do
      it "calls original method" do
        allow(Modifier).to receive(:sum).and_call_original
        allow(Modifier).to receive(:sum).with(3, 4).and_return(-10)

        expect(Modifier.sum(1, 2)).to eq(3)
        expect(Modifier.sum(3, 4)).to eq(-10)
      end
    end
  </script>

  <h3>Old syntax</h3>
  <h4>unstub (or unstub!)</h4>

  <script type="syntaxhighlighter" class="brush: ruby">
    describe String do
      before(:each) { String.stub(:new).and_return("hello") }

      it "can restore it's own behavior" do
        expect(String.new("initial string")).to eq("hello")
        String.unstub(:new)

        expect(String.new("initial string")).to eq("initial string")
      end
    end
  </script>

</section>
