<section id="stub-chain" class="slide">
  <h2>Stub a chain of methods</h2>

  <p>Stubbing methods chain lets you to stub a chain of methods in one statement - and there is no need to stub each method in the dependency chain represented by a chain of messages to different objects.</p>

  <h3>New syntax</h3>

  <script type="syntaxhighlighter" class="brush: ruby">
    class User
      scope :admins, -> { where(role: 'admin').order("created_at DESC") }
    end

    RSpec.describe "stubs method chain" do
      it "returns admin" do
        admin = double('Admin')
        allow(User).to receive_message_chain(:where, :order).and_return([admin])
        // allow(User).to receive_message_chain("where.order") { [admin] }
        // allow(User).to receive_message_chain(:where, order:  [admin])
        // allow(User).to receive_message_chain(:where, :order) { [admin] }
        expect(User.admins).to include(admin)
      end
    end
  </script>

  <h3>Old syntax</h3>

  <script type="syntaxhighlighter" class="brush: ruby">
    Article.recent.published.authored_by(params[:author_id])
  </script>
  <br/>
  <script type="syntaxhighlighter" class="brush: ruby">
    recent = double()
    published = double()
    authored_by = double()
    article = double()

    Article.stub(:recent).and_return(recent)
    recent.stub(:published).and_return(published)
    published.stub(:authored_by).and_return(article)
  </script>
  <br/>
  <script type="syntaxhighlighter" class="brush: ruby">
    article = double()
    Article.stub_chain(:recent, :published, :authored_by).and_return(article)
  </script>
</section>
